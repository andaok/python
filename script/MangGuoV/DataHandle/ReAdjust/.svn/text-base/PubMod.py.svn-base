#!/usr/bin/env python
# -*- encoding:utf-8 -*-

"""
Created on Jan 9, 2013

@author: wye

Copyright @ 2012 - 2013  Cloudiya Tech . Inc 

"""

import sys
import redis
import ujson
import json
import time
import Queue
import threading
import datetime
import logging
import operator
import MySQLdb
from pymongo import MongoClient

# --/
#     全局常量
# --/

class HandleConfig(object):
    
    def __init__(self):
        
        self.EX_CODE_1 = 101
        self.EX_CODE_2 = 102 
        self.EX_CODE_3 = 103
        self.EX_CODE_4 = 104
        self.EX_CODE_5 = 105
        
        self.MongodbIp = "192.168.0.204"        
        self.MongodbPort = 27017
        
        self.MysqldbIp = "192.168.0.112"
        self.MysqldbPort = 3306
        self.MysqlUser = "cloudiya"
        self.MysqlPassword = "c10udiya"
        self.MysqlDbname = "video"
        
        self.RedisIp = "192.168.0.111"
        self.RedisPort = 6379
        
        self.HdfsHost = "192.168.0.112"        
        self.HdfsPort = 50071
        self.HdfsUser = "cloudiyadatauser"
        self.HdfsPrefix="/webhdfs/v1"
        
        self.LogFile = "/tmp/BatchPro.log"
        self.LogLevel = "info"
        self.LogFlag = "BatchPro"
        
        self.workers = 10
        
        #self.date = datetime.datetime.now().strftime("%Y%m%d")
        self.date = (datetime.datetime.now()-datetime.timedelta(days=1)).strftime("%Y%m%d")


# --/
#     合并播放相同次数区段
# --/

def mergerPlaySeg(oldlist):
    newlist = []
    tmplist = []
    
    for k1,k2,v in oldlist:
        if len(tmplist) == 0:
            tmplist = [k1,k2,v]
        else:
            if tmplist[1] != k1:
                newlist.append(tmplist)
                tmplist = [k1,k2,v]
            else:
                if tmplist[2] != v:
                    newlist.append(tmplist)
                    tmplist = [k1,k2,v]
                else:
                    tmplist[1] = k2
    
    newlist.append(tmplist)
    
    return newlist


# --/
#     日志对象
# --/

def getLog(logflag,logfile="/tmp/BatchPro.log",loglevel="info"):
    
    logger = logging.Logger(logflag)
    hdlr = logging.FileHandler(logfile)
    formatter = logging.Formatter("%(asctime)s -- [ %(name)s ] -- %(levelname)s -- %(message)s")
    hdlr.setFormatter(formatter)
    logger.addHandler(hdlr)
    
    if loglevel == "debug": 
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)
        
    return logger


# -- /
#      删除redis中临时数据
# -- /

def delTmpData(redata):
    keylist = redata.keys("T_*")
    
    redpipe = redata.pipeline()
    for key in keylist:
        redpipe.delete(key)
    redpipe.execute()
